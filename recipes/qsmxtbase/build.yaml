name: qsmxtbase
version: 1.1.3

architectures:
    - x86_64

build:
    kind: neurodocker

    base-image: ubuntu:18.04
    pkg-manager: apt

    directives:
        - environment:
              DEBIAN_FRONTEND: noninteractive

        - install:
              - bzip2
              - ca-certificates
              - wget
              - unzip
              - gcc
              - cmake
              - g++
              - dbus-x11
              - libgtk2.0-0
              - git
              - graphviz
              - wget
              - zip
              - libgl1
              - libglib2.0
              - libglu1-mesa
              - libsm6
              - libxrender1
              - libxt6
              - libxcomposite1
              - libfreetype6
              - libasound2
              - libfontconfig1
              - libxkbcommon0
              - libxcursor1
              - libxi6
              - libxrandr2
              - libxtst6
              - qt5-default
              - libqt5svg5-dev
              - wget
              - libqt5opengl5-dev
              - libqt5opengl5
              - libqt5gui5
              - libqt5core5a

        - environment:
              PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

        - workdir: /opt/TGVQSM

        - run:
              - wget https://repo.anaconda.com/miniconda/Miniconda2-4.6.14-Linux-x86_64.sh
              - bash Miniconda2-4.6.14-Linux-x86_64.sh -b -p miniconda2

        - run:
              - miniconda2/bin/conda install -c anaconda cython==0.29.4

        - run:
              - miniconda2/bin/conda install numpy

        - run:
              - miniconda2/bin/conda install pyparsing

        - run:
              - miniconda2/bin/pip install scipy==0.17.1 nibabel==2.1.0

        - run:
              - wget http://www.neuroimaging.at/media/qsm/TGVQSM-plus.zip

        - run:
              - unzip TGVQSM-plus.zip
              - rm TGVQSM-plus.zip

        - workdir: /opt/TGVQSM/TGVQSM-master-011045626121baa8bfdd6633929974c732ae35e3

        - copy: setup.py /opt/TGVQSM/TGVQSM-master-011045626121baa8bfdd6633929974c732ae35e3

        - environment:
              PYTHONPATH: /opt/TGVQSM/TGVQSM-master-011045626121baa8bfdd6633929974c732ae35e3/TGV_QSM

        - run:
              - /opt/TGVQSM/miniconda2/bin/python setup.py install

        - workdir: /opt/TGVQSM/tgvqsm-1.0.0

        - run:
              - cp /opt/TGVQSM/miniconda2/bin/tgv_qsm .

        - environment:
              PATH: $PATH:/opt/TGVQSM/tgvqsm-1.0.0

        - workdir: /opt/bet2

        - run:
              - git clone https://github.com/liangfu/bet2.git .

        - run:
              - cmake .
              - make

        - run:
              - ln -s /opt/bet2/bin/bet2 /bin/bet

        - environment:
              SUBJECTS_DIR: /tmp

        - template:
              name: ants
              version: 2.3.4

        - template:
              name: dcm2niix
              method: source
              version: 003f0d19f1e57b0129c9dcf3e653f51ca3559028

        - template:
              name: miniconda
              conda_install: python=3.6 numpy=1.19.5 h5py=3.1.0 nibabel=3.2.2 dicomifier=2.2.0 scikit-sparse=0.4.6 traits=6.2.0 networkx=2.5 nipype=1.6.1 scipy=1.5.3 scikit-image=0.17.2
              version: 4.7.12.1

        - run:
              - conda install -c pytorch cpuonly pytorch=1.2.0=py3.6_cpu_0 torchvision=0.4.0=py36_cpu

        - run:
              - git clone https://github.com/Deep-MI/FastSurfer.git /opt/FastSurfer

        - environment:
              FASTSURFER_HOME: /opt/FastSurfer
              PATH: $PATH:/opt/FastSurfer

        - run:
              - rm -rf /usr/bin/python3.6
              - ln -s /opt/miniconda-latest/bin/python /usr/bin/python3.6

        - workdir: /opt/bru2

        - run:
              - wget https://github.com/neurolabusc/Bru2Nii/releases/download/v1.0.20180303/Bru2_Linux.zip

        - run:
              - unzip Bru2_Linux.zip

        - environment:
              PATH: $PATH:/opt/bru2

        - workdir: /opt

        - run:
              - wget https://julialang-s3.julialang.org/bin/linux/x64/1.6/julia-1.6.1-linux-x86_64.tar.gz

        - run:
              - tar zxvf julia-1.6.1-linux-x86_64.tar.gz

        - run:
              - rm -rf julia-1.6.1-linux-x86_64.tar.gz

        - environment:
              PATH: $PATH:/opt/julia-1.6.1/bin

        - copy: test.sh /test.sh

deploy: {}

readme: |
    qsmxtbase

files:
    - name: setup.py
      contents: |-
          """A setuptools based setup module.
          See:
          https://packaging.python.org/en/latest/distributing.html
          https://github.com/pypa/sampleproject
          """

          # Always prefer setuptools over distutils
          from setuptools import setup, find_packages
          # To use a consistent encoding
          from codecs import open
          from Cython.Build import cythonize
          import os
          import shutil
          import tempfile
          import subprocess
          import numpy

          here = os.path.abspath(os.path.dirname(__file__))


          def make_ext(modname, pyxfilename):
              from setuptools.extension import Extension

              omp_test = \
                  r"""
                  #include <omp.h>
                  #include <stdio.h>
                  int main() {
                  #pragma omp parallel
                  printf("Hello from thread %d, nthreads %d\n", omp_get_thread_num(), omp_get_num_threads());
                  }
                  """

              def check_for_openmp():
                  tmpdir = tempfile.mkdtemp()
                  curdir = os.getcwd()
                  os.chdir(tmpdir)

                  filename = r'test.c'
                  with open(filename, 'w') as file:
                      file.write(omp_test)
                  with open(os.devnull, 'w') as fnull:
                      result = subprocess.call(['cc', '-fopenmp', filename],
                                               stdout=fnull, stderr=fnull)

                  os.chdir(curdir)
                  # clean up
                  shutil.rmtree(tmpdir)
                  # zero error code means everything was fine
                  return result == 0

              extra_compile_args = ['-O3', '-march=x86-64']
              extra_link_args = []

              if check_for_openmp():
                  print("Building with OpenMP support!")
                  extra_compile_args.append('-fopenmp')
                  extra_link_args.append('-fopenmp')
              else:
                  print("NO OpenMP support!")


              return Extension(name=modname, sources=[pyxfilename],
                               extra_compile_args=extra_compile_args,
                               extra_link_args=extra_link_args,
                               include_dirs=[numpy.get_include()],
                               )


          # Get the long description from the relevant file
          with open(os.path.join(here, 'DESCRIPTION.rst'), encoding='utf-8') as f:
              long_description = f.read()

          # Extension
          extensions = [make_ext(modname="qsm_tgv_cython_helper", pyxfilename="TGV_QSM/qsm_tgv_cython_helper.pyx")]

          setup(
              name='TGV_QSM',

              version='0.1',
              description='A sample Python project',
              long_description=long_description,
              # The project's main homepage.
              # url='https://github.com/pypa/sampleproject',
              # Author details
              author='Christian Langkammer',
              author_email='christian@neuroimaging.at',
              # Choose your license
              license='',

              # What does your project relate to?
              keywords='MRI QSM TGV',

              # You can just specify the packages manually here if your project is
              # simple. Or you can use find_packages().
              packages=find_packages(),

              # List run-time dependencies here.  These will be installed by pip when
              # your project is installed. For an analysis of "install_requires" vs pip's
              # requirements files see:
              # https://packaging.python.org/en/latest/requirements.html

              # We explicitly do not list nipype as a dependency here! Should be installable without nipype
              install_requires=['numpy', 'cython', 'nibabel'],

              ext_modules = cythonize(extensions),

              entry_points={
                  'console_scripts': [
                      'tgv_qsm=TGV_QSM.qsm_tgv_main:main',
                  ]
              }
          )

    - name: test.sh
      contents: |-
          # test FastSurfer
          cd /opt/FastSurfer/
          wget https://files.au-1.osf.io/v1/resources/bt4ez/providers/osfstorage/5e9bf3ab430166067ea05564?action=download&direct&version=1
          mv 5e9bf3ab430166067ea05564\?action\=download test.nii.gz
          ./run_fastsurfer.sh --t1 /opt/FastSurfer/test.nii.gz --sid test --seg_only
