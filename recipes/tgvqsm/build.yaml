name: tgvqsm
version: 1.0.0

architectures:
  - x86_64

build:
  kind: neurodocker

  base-image: ubuntu:16.04
  pkg-manager: apt

  directives:
    - install:
        - wget
        - unzip
        - gcc
        - cmake
        - git
        - g++

    - run:
        - git clone https://github.com/liangfu/bet2.git

    - workdir: /bet2/build

    - run:
        - cmake ..
        - make

    - template:
        name: dcm2niix
        method: source
        version: latest

    - workdir: /

    - run:
        - wget https://repo.anaconda.com/miniconda/Miniconda2-4.6.14-Linux-x86_64.sh

    - environment:
        PATH: /miniconda2/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    - run:
        - bash Miniconda2-4.6.14-Linux-x86_64.sh -b -p /miniconda2/

    - run:
        - /miniconda2/bin/conda install -c anaconda cython==0.29.14

    - run:
        - /miniconda2/bin/conda install numpy

    - run:
        - /miniconda2/bin/conda install pyparsing

    - run:
        - /miniconda2/bin/pip install scipy==0.17.1 nibabel==2.1.0

    - run:
        - wget http://www.neuroimaging.at/media/qsm/TGVQSM-plus.zip

    - run:
        - unzip TGVQSM-plus.zip

    - workdir: /TGVQSM-master-011045626121baa8bfdd6633929974c732ae35e3

    - copy: setup.py /TGVQSM-master-011045626121baa8bfdd6633929974c732ae35e3

    - run:
        - /miniconda2/bin/python setup.py install

    - workdir: /opt/tgvqsm-1.0.0

    - run:
        - cp /miniconda2/bin/tgv_qsm .

deploy:
  path:
    - /opt/tgvqsm-1.0.0/
    - /bet2/
    - /opt/dcm2niix-latest/bin

readme: |-
  ----------------------------------
  ## tgvqsm/{{ context.version }} ##
  Quantitative susceptibility mapping allows the determination magnetic susceptibility from MRI phase data. TGV QSM is a python implementation to compute this.

  This container also includes bet2 for brain extraction and dcm2niix to convert dicom data to NiFTI files.

  Example:
  ```
  dcm2niix -o ./ -f magnitude GR_M_5_QSM_p2_1mmIso_TE20/
  dcm2niix -o ./ -f phase GR_P_6_QSM_p2_1mmIso_TE20/

  bet2 magnitude.nii magnitude_bet2

  tgv_qsm \
    -p phase.nii \
    -m magnitude_bet2_mask.nii.gz \
    -f 2.89 \
    -t 0.02 \
    -s \
    -o qsm
  ```

  More documentation can be found here: http://www.neuroimaging.at/pages/qsm.php

  To run container outside of this environment: ml tgvqsm/{{ context.version }}

  Citation:
  ```
  Langkammer, C; Bredies, K; Poser, BA; Barth, M; Reishofer, G; Fan, AP; Bilgic, B; Fazekas, F; Mainero; C; Ropele, S
  Fast Quantitative Susceptibility Mapping using 3D EPI and Total Generalized Variation.
  Neuroimage. 2015 May 1;111:622-30. doi: 10.1016/j.neuroimage.2015.02.041
  ```

  ----------------------------------

files:
  - name: setup.py
    contents: |-
      """A setuptools based setup module.
      See:
      https://packaging.python.org/en/latest/distributing.html
      https://github.com/pypa/sampleproject
      """

      # Always prefer setuptools over distutils
      from setuptools import setup, find_packages
      # To use a consistent encoding
      from codecs import open
      from Cython.Build import cythonize
      import os
      import shutil
      import tempfile
      import subprocess
      import numpy

      here = os.path.abspath(os.path.dirname(__file__))


      def make_ext(modname, pyxfilename):
          from setuptools.extension import Extension

          omp_test = \
              r"""
              #include <omp.h>
              #include <stdio.h>
              int main() {
              #pragma omp parallel
              printf("Hello from thread %d, nthreads %d\n", omp_get_thread_num(), omp_get_num_threads());
              }
              """

          def check_for_openmp():
              tmpdir = tempfile.mkdtemp()
              curdir = os.getcwd()
              os.chdir(tmpdir)

              filename = r'test.c'
              with open(filename, 'w') as file:
                  file.write(omp_test)
              with open(os.devnull, 'w') as fnull:
                  result = subprocess.call(['cc', '-fopenmp', filename],
                                           stdout=fnull, stderr=fnull)

              os.chdir(curdir)
              # clean up
              shutil.rmtree(tmpdir)
              # zero error code means everything was fine
              return result == 0

          extra_compile_args = ['-O3', '-march=x86-64']
          extra_link_args = []

          if check_for_openmp():
              print("Building with OpenMP support!")
              extra_compile_args.append('-fopenmp')
              extra_link_args.append('-fopenmp')
          else:
              print("NO OpenMP support!")


          return Extension(name=modname, sources=[pyxfilename],
                           extra_compile_args=extra_compile_args,
                           extra_link_args=extra_link_args,
                           include_dirs=[numpy.get_include()],
                           )


      # Get the long description from the relevant file
      # with open(os.path.join(here, 'DESCRIPTION.rst'), encoding='utf-8') as f:
      #     long_description = f.read()

      # Extension
      extensions = [make_ext(modname="qsm_tgv_cython_helper", pyxfilename="TGV_QSM/qsm_tgv_cython_helper.pyx")]

      setup(
          name='TGV_QSM',

          version='0.1',
          description='A sample Python project',
          long_description='TGVQSM',
          # The project's main homepage.
          # url='https://github.com/pypa/sampleproject',
          # Author details
          author='Christian Langkammer',
          author_email='christian@neuroimaging.at',
          # Choose your license
          license='',

          # What does your project relate to?
          keywords='MRI QSM TGV',

          # You can just specify the packages manually here if your project is
          # simple. Or you can use find_packages().
          packages=find_packages(),

          # List run-time dependencies here.  These will be installed by pip when
          # your project is installed. For an analysis of "install_requires" vs pip's
          # requirements files see:
          # https://packaging.python.org/en/latest/requirements.html

          # We explicitly do not list nipype as a dependency here! Should be installable without nipype
          install_requires=['numpy', 'cython', 'nibabel'],

          ext_modules = cythonize(extensions),

          entry_points={
              'console_scripts': [
                  'tgv_qsm=TGV_QSM.qsm_tgv_main:main',
              ]
          }
      )
